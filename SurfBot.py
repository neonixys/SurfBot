import asyncio
import logging
import os
import re
import time
from pathlib import Path

import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext
from telethon import TelegramClient, events

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Telegram API –∫–ª—é—á–∏
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
api_id = os.getenv("TELEGRAM_API_ID")
api_hash = os.getenv("TELEGRAM_API_HASH")

if not TOKEN or not api_id or not api_hash:
    logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN, TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
bot_started_chats = set()  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
start_cooldown = 3
last_start_times = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ ID —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
chat_ids_file = Path("chat_ids.txt")
if not chat_ids_file.exists():
    logger.error("–§–∞–π–ª chat_ids.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.")
    exit(1)

with open(chat_ids_file, "r") as file:
    group_chat_ids = [int(line.strip()) for line in file if line.strip()]


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_keywords(file_path):
    path = Path(file_path)
    if not path.exists():
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.")
        exit(1)
    with open(path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]


keywords = load_keywords("keywords.txt")
exclude_keywords = load_keywords("exclude_keywords.txt")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('user_session', api_id, api_hash)

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram MarkdownV2, –∏–∑–±–µ–≥–∞—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è URL."""
    escape_chars = r"_*[]()~`>#+-=|{}.!<>"

    def is_url(string):
        return bool(re.match(r'https?://[^\s]+', string))

    parts = re.split(r'(https?://[^\s]+)', text)

    escaped_parts = [
        ''.join(f'\\{char}' if char in escape_chars else char for char in part) if not is_url(part) else part
        for part in parts
    ]

    return ''.join(escaped_parts)


def contains_keywords(message, keywords_list):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é)."""
    for word in keywords_list:
        if re.search(rf'\b{re.escape(word)}\b', message, re.IGNORECASE):
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {word}")
            return True
    return False


def contains_exclude_keywords(message, exclude_keywords_list):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–ø–æ –ø–æ–ª–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é)."""
    for word in exclude_keywords_list:
        if re.search(rf'\b{re.escape(word)}\b', message, re.IGNORECASE):
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {word}")
            return True
    return False



async def forward_message_to_bot_chats(text, user_link, chat_title, chat_link):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Bot API."""
    if not bot_started_chats:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤. –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.")
        return

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    text = escape_markdown(text)
    if user_link:
        user_link = escape_markdown(user_link)
    if chat_link:
        chat_link = escape_markdown(chat_link)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ –≥—Ä—É–ø–ø—É
    keyboard = []
    if user_link:
        keyboard.append([{"text": "üë§ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "url": user_link}])
    keyboard.append([{"text": "üåê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", "url": chat_link}])

    reply_markup = {"inline_keyboard": keyboard}

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    for chat_id in bot_started_chats:
        send_message_url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            "reply_markup": reply_markup,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            "parse_mode": "MarkdownV2",  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            "disable_web_page_preview": True,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
        }

        response = requests.post(send_message_url, json=data)
        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {response.text}")


@client.on(events.NewMessage(chats=group_chat_ids))
async def handle_new_message(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    sender = await event.get_sender()
    if sender.bot:
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = event.message.message
    user_link = f"https://t.me/{sender.username}" if sender.username else None
    chat_title = event.chat.title or "Unknown Chat"

    if event.chat.username:  # –ü—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
        chat_link = f"https://t.me/{event.chat.username}/{event.id}"
    else:  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞
        chat_link = f"https://t.me/c/{str(event.chat_id)[4:]}/{event.id}"

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞: {chat_title} (ID: {event.chat_id}), –°—Å—ã–ª–∫–∞: {chat_link}")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
    if contains_exclude_keywords(message_text, exclude_keywords):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞—é—â–µ–µ —Å–ª–æ–≤–æ. –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è.")
        return

    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤.")

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö)
    if contains_keywords(message_text, keywords):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ.")
        await forward_message_to_bot_chats(message_text, user_link, chat_title, chat_link)
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è.")



async def async_run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram Bot API."""
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))

    await application.initialize()
    logger.info("–ë–æ—Ç Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    await application.start()
    logger.info("–ë–æ—Ç Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await application.updater.start_polling()


async def async_run_telethon_client():
    """–ó–∞–ø—É—Å–∫ Telethon."""
    logger.info("–ó–∞–ø—É—Å–∫ Telethon –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await client.start()
    await client.run_until_disconnected()


async def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    global last_start_times

    chat_id = update.effective_chat.id
    current_time = time.time()

    if chat_id in last_start_times and (current_time - last_start_times[chat_id] < start_cooldown):
        logger.info(
            f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –±–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return

    last_start_times[chat_id] = current_time
    bot_started_chats.add(chat_id)

    await update.message.reply_text("‚ú® –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
    logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π /start –≤ —á–∞—Ç–µ {chat_id}.")


async def stop(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞."""
    chat_id = update.effective_chat.id

    if chat_id in bot_started_chats:
        bot_started_chats.remove(chat_id)
        await update.message.reply_text("üö´ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        logger.info(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /stop –≤ —á–∞—Ç–µ {chat_id}.")
    else:
        await update.message.reply_text("–ë–æ—Ç –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}, –Ω–æ –æ–Ω –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(async_run_telegram_bot())
    loop.create_task(async_run_telethon_client())
    loop.run_forever()
