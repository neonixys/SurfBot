import asyncio
import logging
import os
import re
from pathlib import Path
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext
from telethon import TelegramClient, events

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ Telegram API –∫–ª—é—á–∏
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
api_id = os.getenv("TELEGRAM_API_ID")
api_hash = os.getenv("TELEGRAM_API_HASH")

if not TOKEN or not api_id or not api_hash:
    logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN, TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
bot_started_chats = set()
start_cooldown = 3
last_start_times = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ ID —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
chat_ids_file = Path("chat_ids.txt")
if not chat_ids_file.exists():
    logger.error("–§–∞–π–ª chat_ids.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.")
    exit(1)

with open(chat_ids_file, "r") as file:
    group_chat_ids = [int(line.strip()) for line in file if line.strip()]
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —á–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {group_chat_ids}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_keywords(file_path):
    path = Path(file_path)
    if not path.exists():
        logger.error(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ.")
        exit(1)
    with open(path, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

keywords = load_keywords("keywords.txt")
exclude_keywords = load_keywords("exclude_keywords.txt")

logger.info(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
logger.info(f"–°–ª–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {exclude_keywords}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('user_session', api_id, api_hash)

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2
def escape_markdown(text):
    escape_chars = r"_*[]()~`>#+-=|{}.!<>"
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
def contains_keywords(message, keywords_list):
    for word in keywords_list:
        if re.search(rf'\b{re.escape(word)}\b', message, re.IGNORECASE):
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {word}")
            return True
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
def contains_exclude_keywords(message, exclude_keywords_list):
    for word in exclude_keywords_list:
        if re.search(rf'\b{re.escape(word)}\b', message, re.IGNORECASE):
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {word}")
            return True
    return False

async def forward_message_to_bot_chats(text, user_link, chat_title, chat_link):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Bot API."""
    if not bot_started_chats:
        logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤. –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è.")
        return

    text = escape_markdown(text)
    keyboard = []
    if user_link:
        user_link = escape_markdown(user_link)
        keyboard.append([{"text": "üë§ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "url": user_link}])
    if chat_link:
        chat_link = escape_markdown(chat_link)
        keyboard.append([{"text": "üåê –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É", "url": chat_link}])

    reply_markup = {"inline_keyboard": keyboard}

    for chat_id in bot_started_chats:
        try:
            response = requests.post(
                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": text,
                    "reply_markup": reply_markup,
                    "parse_mode": "MarkdownV2",
                    "disable_web_page_preview": True,
                },
            )
            response.raise_for_status()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")

@client.on(events.NewMessage(chats=group_chat_ids))
async def handle_new_message(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    sender = await event.get_sender()
    if sender.bot:
        return

    message_text = event.message.message
    user_link = f"https://t.me/{sender.username}" if sender.username else None
    chat_title = event.chat.title or "Unknown Chat"

    if event.chat.username:
        chat_link = f"https://t.me/{event.chat.username}/{event.id}"
    else:
        chat_link = f"https://t.me/c/{str(event.chat_id)[4:]}/{event.id}"

    logger.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {chat_title} (ID: {event.chat_id})")

    if contains_exclude_keywords(message_text, exclude_keywords):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–∞—é—â–µ–µ —Å–ª–æ–≤–æ. –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è.")
        return

    if contains_keywords(message_text, keywords):
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º...")
        await forward_message_to_bot_chats(message_text, user_link, chat_title, chat_link)
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ù–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç—Å—è.")

async def async_run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram Bot API."""
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    await application.initialize()
    logger.info("–ë–æ—Ç Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    await application.start()
    await application.updater.start_polling()

async def async_run_telethon_client():
    """–ó–∞–ø—É—Å–∫ Telethon."""
    logger.info("–ó–∞–ø—É—Å–∫ Telethon –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await client.start()
    await client.run_until_disconnected()

async def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    bot_started_chats.add(chat_id)
    await update.message.reply_text("‚ú® –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat_id}.")

async def stop(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    bot_started_chats.discard(chat_id)
    await update.message.reply_text("üö´ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    logger.info(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —á–∞—Ç–µ {chat_id}.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(async_run_telegram_bot())
    loop.create_task(async_run_telethon_client())
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    finally:
        if client.is_connected():
            client.disconnect()
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
